// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// AnIn1
double AnIn1(NumericVector knot);
RcppExport SEXP bsplinePsd_AnIn1(SEXP knotSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type knot(knotSEXP);
    rcpp_result_gen = Rcpp::wrap(AnIn1(knot));
    return rcpp_result_gen;
END_RCPP
}
// AnIn2
double AnIn2(NumericVector knot);
RcppExport SEXP bsplinePsd_AnIn2(SEXP knotSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type knot(knotSEXP);
    rcpp_result_gen = Rcpp::wrap(AnIn2(knot));
    return rcpp_result_gen;
END_RCPP
}
// AnIn3
double AnIn3(NumericVector knot);
RcppExport SEXP bsplinePsd_AnIn3(SEXP knotSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type knot(knotSEXP);
    rcpp_result_gen = Rcpp::wrap(AnIn3(knot));
    return rcpp_result_gen;
END_RCPP
}
// AnIn4
double AnIn4(NumericVector knot);
RcppExport SEXP bsplinePsd_AnIn4(SEXP knotSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type knot(knotSEXP);
    rcpp_result_gen = Rcpp::wrap(AnIn4(knot));
    return rcpp_result_gen;
END_RCPP
}
// AnIn5
double AnIn5(NumericVector knot);
RcppExport SEXP bsplinePsd_AnIn5(SEXP knotSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type knot(knotSEXP);
    rcpp_result_gen = Rcpp::wrap(AnIn5(knot));
    return rcpp_result_gen;
END_RCPP
}
// AnIn6
double AnIn6(NumericVector knot);
RcppExport SEXP bsplinePsd_AnIn6(SEXP knotSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type knot(knotSEXP);
    rcpp_result_gen = Rcpp::wrap(AnIn6(knot));
    return rcpp_result_gen;
END_RCPP
}
// AnIn7
double AnIn7(NumericVector knot);
RcppExport SEXP bsplinePsd_AnIn7(SEXP knotSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type knot(knotSEXP);
    rcpp_result_gen = Rcpp::wrap(AnIn7(knot));
    return rcpp_result_gen;
END_RCPP
}
// AnIn8
double AnIn8(NumericVector knot);
RcppExport SEXP bsplinePsd_AnIn8(SEXP knotSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type knot(knotSEXP);
    rcpp_result_gen = Rcpp::wrap(AnIn8(knot));
    return rcpp_result_gen;
END_RCPP
}
// pFromV
NumericVector pFromV(NumericVector v);
RcppExport SEXP bsplinePsd_pFromV(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(pFromV(v));
    return rcpp_result_gen;
END_RCPP
}
// mixtureWeight
NumericVector mixtureWeight(NumericVector p, NumericVector w, unsigned k);
RcppExport SEXP bsplinePsd_mixtureWeight(SEXP pSEXP, SEXP wSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< unsigned >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(mixtureWeight(p, w, k));
    return rcpp_result_gen;
END_RCPP
}
// densityMixture
NumericVector densityMixture(NumericVector weights, NumericMatrix densities);
RcppExport SEXP bsplinePsd_densityMixture(SEXP weightsSEXP, SEXP densitiesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type densities(densitiesSEXP);
    rcpp_result_gen = Rcpp::wrap(densityMixture(weights, densities));
    return rcpp_result_gen;
END_RCPP
}
